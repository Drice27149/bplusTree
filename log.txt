b+树可视化项目
2020.08.31
今天开始, 完成了qt的安装。
2020.09.01
在维基百科上阅读了b+树的大体定义, 了解了查询和插入的大体过程。
删除的实现在维基上没找到, 应该是一个难点。
2020.09.02
在谷歌搜索b+树的删除, 找到的实现需要比较多的case work, 感觉过于繁琐了。理论上, 应该存在没那么繁琐的递归实现。
百度了一下, 找到了一篇讲解b+树删除的博客, 这个实现方法基本没有case work, 但正确性仍待考察。
顺便了解了b树的原理, 类似平衡树, 和b+树区别在于b树的中间结点是有数据的, 而b+树只有叶子结点有数据, 从复杂度上看两个是一样的。
2020.09.03~04
实现方针:
性质: 设x为当前结点的子树数量, m为阶数, 可以知道(m+1)/2<=x<=m。
设y为当前结点的关键字数量, 可以知道m/2<=y<=m-1
首先要明白三种重要操作的流程:
1. 查找
一个子树代表一个左闭右开的区间, 按照目标所属的区间进入子树递归查询。如果最后到达的叶子中, 含有一个key和目标一致, 则查找成功; 否则查找失败。
(下界: m/2-1)
2. 插入
对叶子和内部节点分开处理
叶子:
如果插入后<=m-1, 则插入完成。
否则进行分裂: 左m/2, 剩下的右, 父节点插入一个m/2+1。
内部节点:
如果插入后<=m-1, 则插入完成。
否则进行分裂: 左(m-1)/2, 上移(m-1)/2+1, 剩下的右。
追记:
疑问: 能否保证每个key两边都不是空指针? if yes, 那么下面的才成立。
手持要插入的key, 先按查找的流程进入到一个叶子节点, 然后在这个叶子中将key插入, 接着就进入递归的调整过程。
3. 删除
//todo: 替换的意思没弄懂, 感觉上更新就可以了
//同样的, 对叶子和内部节点分开处理
//叶子:
若删除后大于等于下限, 则删除完成
否则:
    1.往左或者右借一个key, 并对父结点中key进行更新
    2.借不到, 则进行合并, 对父结点中key进行删除
2020.09.05~
停工复习期末考
2020.09.08~
计网 & 操统复习开始, 初步计划为课后习题导向型。
2020.09.21
上学期的期末考试终于结束了, 继续b+树可视化的进度。
2020.09.22
开始写伪代码, 决定先用伪代码把整个流程过一遍。
发现伪代码不如直接写c++, 于是选择用c++把b+树先实现一次。
中间结点插入后的前驱和后继有点难处理, 思考一下。
追记: 上升结点的前驱成了左部分的最后一个, 后继成了右部分的第0个, 所以ptr不为空仍然可以保证。
todo: 同步到git, 中午完成